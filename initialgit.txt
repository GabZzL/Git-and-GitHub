"command line"
-------------------------------------------
cd : "go to directories"
cd.. : "one level back" 
ls : "see the files in the current direction" 
pwd : "see my current directory"
touch : "create a file, we need to add the extension"
mkdir : "create a new directory"
start <file.extension>: "open a file"
code. : "open visualstudio code"

"git configuration"
-------------------------------------------
git config --global user.name "gabriel : "configure Git with your username"
git config --global user.email "armandogabrieljl@gmail.com : "set your email address in Git's global configuration"
git config --global --list : "see my global configuration"

git: "The Git command-line tool, used to interact with Git repositories."
config: "The subcommand used to set configuration options for Git."
--global: "This flag specifies that the configuration setting should apply globally, meaning it will affect all repositories on your system. If you omit this flag, the configuration would only apply to the current repository."

"basic git commands"
-------------------------------------------
git init: "to start git in our project directory"
git branch -m main : "change the name of the master branch to main"
git status : "see the current staging area and files"
git log : "see all the commits"
git log --graph --pretty=oneline : "see a simple version of the commits" 
git log --graph --decorate --all --oneline : "one of the most reduce versions"
git log --graph : "see the commits and the branches"


git add <name.extension> or <.> : "add the files to the staging area"
git commit -m "message" : "make a commit with a message(local repository)"
git checkout <name.extension> or <.> : return to the last commit 

"master" : "When you create a new Git repository, the default branch is typically named "master." This is the branch that Git will create automatically unless specified otherwise."

"Working Directory" : "The working directory is where you make changes to your project files. It contains all the files and directories of your project."
"Staging Area (Index)" : "The staging area is an intermediate area where you can format and review your changes before committing them. It's like a clipboard where you prepare a snapshot of the changes you want to include in your next commit."
"Repository (Commit History)" : "The repository is where Git permanently stores the project history as a series of snapshots (commits)."

"Local Repository" : "Your local repository is the copy of the project that resides on your local machine. It contains the complete version history of the project, including all branches, commits, and files."
"Remote Repository" : "A remote repository is a version of your repository that is hosted on a remote server. It serves as a centralized location where multiple developers can collaborate on the same project.
Remote repositories can be hosted on various platforms, such as GitHub, GitLab, Bitbucket, or private servers."

"hash" : "A hash is a unique alphanumeric string generated by applying the SHA-1 algorithm to the contents of an object (commit, file, tree, or blob)."

"alias"
-------------------------------------------
Git aliases are shortcuts or custom commands that you can create to simplify and speed up your workflow. 

git config --global alias.<alias-name> '<command>'
git config --global alias.tree "log --graph --pretty=oneline" : "config an alias(git tree)"

"git ignore"
-------------------------------------------
touch .gitignore : "to create the file"

**/<name.extension> : "Ignore any file named <name.extension> located in any directory or subdirectory, no matter how deeply nested it is within the repository."

"The double asterisk (**)" : ""a wildcard that matches directories recursively. It tells Git to match zero or more directories at any level.""

"move in the branch"
-------------------------------------------
"HEAD" : ""a reference to the current commit that your working directory is based on. It’s essentially a pointer that tells you where you are in the repository’s commit history.""

git diff : "see the changes"
git checkout <hash> : "to go backwards or forwards in the branch"
git checkout HEAD : "set the head in the current commit"
get checkout main : "move the HEAD to the main"

"GIT RESET HARD AND REFLOG"
-------------------------------------------
git reset --hard <hash> : "Resets the index and working tree. Any changes to tracked files in the working tree since <commit> are discarded. Any untracked files or directories in the way of writing any tracked files are simply deleted." 
git reflog : "Essentially, it keeps a log of where the HEAD and branch references have been, which can be invaluable for undoing mistakes or finding lost work."

"GIT TAG"
-------------------------------------------
"tag" : "add relevant information to the commit(example: versions)"
git tag <tagname> : "add a tag to the commit" 
git checkout tags/<tagname> : "move on the branch by tags"

"GIT BRANCH AND SWITCH"
-------------------------------------------
git branch <name> : "create a new branch, saving the previous commits from the main branch"
git switch <branch name> : "to move to another branch"

"GIT MERGE"
-------------------------------------------
git merge <branch name> : "combine the current branch with the specified branch(we create a commit in the process)"

"GIT CONFLICS"
-------------------------------------------
"Merge conflicts occur when conflicting changes are made to the same line in a file or when one person edits a file and another person deletes the same file."
"to solve this we need to modify the file to make a solution, then add and commit" 

"GIT STASH"
-------------------------------------------
git stash : " temporarily shelves (or stashes) changes you've made to your working copy so you can work on something else, and then come back and re-apply them later on."
git stash list : "to see our hashes"
git stash pop : "return the hash"
git stash drop : "delete the hashes"

"GIT REINTEGRATING"
-------------------------------------------
git merge <childbranch name> : "A reintegration merge, also known as a back merge is appropriate when the changes made in a branch need to be integrated back into the branch’s ancestor." 

"GIT DELETE BRANCH"
-------------------------------------------
git branch -d <branch name> : "delete a branch, if it has already been pushed and merged with the remote branch"
git branch -D <branch name> : "if you want to force the branch to be deleted, even if it hasn't been pushed or merged yet."
git checkout <hash> : "we could return to the delete branch by the hash from the commit"
